""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""" local config
" source local config
if !empty(glob("~/.dotfiles/vim/vimrc.local"))
  so ~/.dotfiles/vim/vimrc.local
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""" general settings

" I WANT EVERYTHING IN UTF-8
scriptencoding utf-8

" more utf8 stuff
set encoding=utf-8

" i want vim and not vi, so turn off compatible stuff
set nocp

" gimme history
set history=1000

" enable modeline ..
set ml

" .. and check certain lines
set modelines=5

" highlight search occurrences
set hlsearch

" i want to delete indents and over the start of insert
set backspace=indent,start,eol

" some clipboard magic
set clipboard+=unnamed

" simpler way of dealing with clipboard without compiling vim
" to xclip
map <F7> :w !xclip<CR><CR>
" from xclip
map <F8> :r !xclip -o<CR>

" paste mode with key combo
set pastetoggle=<f4>

" i always want a status line
set laststatus=2

" tweak airline
let g:airline#extensions#tabline#enabled = 1

" show the mode
set showmode

" more space for commands
set ch=2

" Set 7 lines to the cursor - when moving vertically using j/k
set so=10

" autocomplete ..
set wildmenu

" .. but not everything
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpe?g,*.png,*.xpm,*.gif,*.pyc

" a "better" search
set incsearch
set ignorecase
set smartcase
set magic

" Use spaces instead of tabs
set expandtab

" usual tab space
set shiftwidth=4
set tabstop=4

" yaml tab space
autocmd BufNewFile,BufRead *.yaml set shiftwidth=2
autocmd BufNewFile,BufRead *.yaml set tabstop=2

" my vim theme
colorscheme idleFingers

" adjust highlighting
highlight ColorColumn ctermbg=137 guibg=green

" wrap lines
set wrap

" with which keys to wrap text
set whichwrap+=<,>,h,l,[,]

" wrapped line design
let &showbreak = '↪ '

" foldlevel setting
set foldlevel=1

" set format options
set fo=ctqnM1

" non-printable chars ..
set list

" .. and their appearance
set listchars=nbsp:␣,eol:¶,tab:>-,extends:»,precedes:«,trail:•

" set line numbering
set number

" mouse mode in insert mode only
set mouse=i

" automatically re-read file when change from outside
set autoread

" Don't redraw while executing macros (good performance config)
set lazyredraw

" underline where cursor is
set cursorline
hi CursorLine cterm=NONE ctermbg=52 ctermfg=white

" gimme tabs
set tabpagemax=100

" colon should not be a word and should separate it
" set iskeyword=-,@,48-57,_,192-255
set iskeyword-=:

" auto indent
set ai

" smart indent
set si

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" custom timeout settings
set timeout timeoutlen=300 ttimeoutlen=100

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""" keymapping in command mode only

" enable/disable line numbering
map <F5> :set number! number?<CR>

" mark all occurrences of selected string
nnoremap , :mat Error "<C-R><C-W>"<CR>

" map ctrl arrow keys
" ctrl right
map <ESC>[1;5C w
" ctrl down
map <ESC>[1;5B j
" ctrl left
map <ESC>[1;5D b
" ctrl up
map <ESC>[1;5A k

" delete word backwards
map <ESC>[3;5~ bdaw

" save with ESC ESC
map <Esc><Esc> :w<CR>

" jump to eol with \ (way more comfortable with US layout)
map \ $

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Useful mappings for managing tabs
map <leader>tc :tabnew<cr>
map <leader>tx :tabclose<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>to :tabonly<cr>
map <leader>tl :-tabmove<cr>
map <leader>tr :+tabmove<cr>
map <leader>ta :0tabmove<cr>

" fold with space
map <Space> za

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/<cr>

" copy-paste a whole word under current cursor
map <C-y> <Esc>b<C-v>ey<Esc>
map <C-p> <Esc>b<C-v>e"_dP<Esc>

" be consistent with variable stuff in shell
map $$ <Esc>ea}<Esc>bha{<Esc>

" in a mail, delete everything following until signature
map ds ^v/^-- <Enter>kd:noh<Enter>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""" keymapping in insert mode only

" save file with a combo in insert mode
imap <c-x> <c-o>:w<cr>

" fast exit with jj
imap jj <ESC>

" save with ESC ESC in insert mode
imap <Esc><Esc> <Esc>:w<CR>a

" save and exit with Ctrl-X Ctrl-X
imap <c-x><c-x> <Esc>:wq<CR>

" delete current line with C-k from current position on
inoremap <C-k> <Esc>ld$a

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""" commands

"Pathogen syntax highlighting things
call pathogen#infect()
filetype off
syntax on
let g:syntastic_puppet_puppetlint_args = "--no-80chars-check --no-140chars-check"
filetype plugin indent on
call pathogen#helptags()

" Strip trailing whitespace (,ss)
fun! <SID>StripTrailingWhitespaces()
    if &ft =~ 'mail'
        return
    else
        let l = line(".")
        let c = col(".")
        %s/\s\+$//e
        call cursor(l, c)
    endif
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Tip: Place the cursor in the optimal position, editing email messages.
" Author: Davide Alberani
" Version: 0.1
" Date: 24 May 2006
" Description: if you use Vim to edit your emails, having to manually
" move the cursor to the right position can be quite annoying.
" This command will place the cursor (and enter insert mode)
" in the more logical place: at the Subject header if it's
" empty or at the first line of the body (also taking
" care of the attribution, to handle replies messages).
" Usage: I like to call the Fip command by setting the command that is used
" by my mail reader (mutt) to execute Vim. E.g. in my muttrc I have:
" set editor="vim -c ':Fip'"
" Obviously you can prefer to call it using an autocmd:
" " Modify according to your needs and put this in your vimrc:
" au BufRead mutt* :Fip
" Hints: read the comments in the code and modify it according to your needs.
" Keywords: email, vim, edit, reply, attribution, subject, cursor, place.

" Function used to identify where to place the cursor, editing an email.
function FirstInPost (...) range
let cur = a:firstline
while cur <= a:lastline
let str = getline(cur)
" Found an _empty_ subject in the headers.
" NOTE: you can put similar checks to handle other empty headers
" like To, From, Newgroups, ...
if str == 'Subject: '
  execute cur
  :start!
  break
endif
" We have reached the end of the headers.
if str == ''
  let cur = cur + 1
  " " If the first line of the body is an attribution, put
  " " the cursor _after_ that line, otherwise the cursor is
  " " leaved right after the headers (assuming we're writing
  " " a new mail, and not editing a reply).
  " " NOTE: modify the regexp to match your mail client's attribution!
  " if strlen(matchstr(getline(cur), '^On.*wrote:.*')) > 0
  "   let cur = cur + 1
  " endif
  execute cur
  :start
  break
endif
let cur = cur + 1
endwhile
endfunction

" Command to be called.
com Fip :set tw=80<Bar>:set colorcolumn=+1<Bar>:set fo=ctqnM1<Bar>:highlight ColorColumn ctermbg=137 guibg=green<Bar>:%call FirstInPost()
autocmd BufRead mutt* execute 'Fip'

