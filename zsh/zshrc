# set the right locale env for myself
# set de_CH.utf*8 or C
export LC_CTYPE="$(locale -a 2>/dev/null | grep -i de_ch | grep -i utf || echo "C")"
export LANG="C"

# set the right term
if [ "$TERM" = "xterm" ] ; then
    if [ -z "$COLORTERM" ] ; then
        if [ -z "$XTERM_VERSION" ] ; then
            echo "Warning: Terminal wrongly calling itself 'xterm'."
        else
            case "$XTERM_VERSION" in
            "XTerm(256)") TERM="xterm-256color" ;;
            "XTerm(88)") TERM="xterm-88color" ;;
            "XTerm") ;;
            *)
                echo "Warning: Unrecognized XTERM_VERSION: $XTERM_VERSION"
                ;;
            esac
        fi
    else
        case "$COLORTERM" in
            gnome-terminal|roxterm|mate-terminal|truecolor)
                # Those crafty Gnome folks require you to check COLORTERM,
                # but don't allow you to just *favor* the setting over TERM.
                # Instead you need to compare it and perform some guesses
                # based upon the value. This is, perhaps, too simplistic.
                TERM="gnome-256color"
                ;;
            *)
                echo "Warning: Unrecognized COLORTERM: $COLORTERM"
                ;;
        esac
    fi
fi
SCREEN_COLORS="`tput colors`"
if [ -z "$SCREEN_COLORS" ] ; then
    case "$TERM" in
        screen-*color-bce)
            echo "Unknown terminal $TERM. Falling back to 'screen-bce'."
            export TERM=screen-bce
            ;;
        *-88color)
            echo "Unknown terminal $TERM. Falling back to 'xterm-88color'."
            export TERM=xterm-88color
            ;;
        *-256color)
            echo "Unknown terminal $TERM. Falling back to 'xterm-256color'."
            export TERM=xterm-256color
            ;;
    esac
    SCREEN_COLORS=`tput colors`
fi
if [ -z "$SCREEN_COLORS" ] ; then
    case "$TERM" in
        gnome*|xterm*|konsole*|aterm|[Ee]term)
            echo "Unknown terminal $TERM. Falling back to 'xterm'."
            export TERM=xterm
            ;;
        rxvt*)
            echo "Unknown terminal $TERM. Falling back to 'rxvt'."
            export TERM=rxvt
            ;;
        screen*)
            echo "Unknown terminal $TERM. Falling back to 'screen'."
            export TERM=screen
            ;;
    esac
    SCREEN_COLORS=`tput colors`
fi

# Set up the prompt
autoload -Uz promptinit
promptinit

# I love history in ZSH
HISTSIZE=100000000
SAVEHIST=100000000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

# mac special
if [[ "$(uname -s)" == "Darwin" ]]
then
    eval "$(cat ~/.dotfiles/zsh/zshrc.dircolors)"
else
    eval "$(dircolors -b)"
fi

# completion settings
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:killall:*' command 'ps -u $USER -o command'
# I also want to honor IPs (regarding known_hosts files especially)
zstyle ':completion:*' use-ip true

# load more functions
fpath=($fpath ~/.dotfiles/zsh/functions)

# run-help functions
autoload -U run-help-git
autoload -U run-help-btrfs
autoload -U run-help-puppet

# custom functions
autoload -U gitgrep
autoload -U cineman
autoload -U wtime
autoload -U stopwatch
autoload -U tputcolors
autoload -U spellit
autoload -U maildelivery
autoload -U smtplogin
autoload -U countdown
autoload -U dictcc
autoload -U reverse
autoload -U csrcheck
autoload -U crtcheck

# turn on interactive comments
setopt interactivecomments

# perform path expansion
setopt EQUALS

# it was told me to do that
unsetopt MULTIBYTE

# some more strange things
setopt menu_complete

# correction?? I do not know..
setopt correct

# share history with all terminals open
setopt share_history

# because someday i will learn advanced pattern matching
# # it sounds very useful, like regexps
setopt extended_glob

# ignore duplicates in history
setopt histignoredups

# ignore commands with preceding space in history
# seems not to work :/
setopt histignorespace

# save timestamps of commands
setopt extended_history

# because i love history, appendixes, and appending things
setopt appendhistory

# don't assume i want to cd, that's fucking rude
unsetopt autocd

# seriously why does this shit even exist
unsetopt beep

# DON'T YOU YELL AT ME WHEN YOU CAN'T FIND A MATCH
# THAT'S YOUR PROBLEM, _NOT_ MINE
unsetopt nomatch

# when i put a process in the background,
# it's code for "fuck off and leave me alone"
unsetopt notify

# lets files beginning with a . be matched without explicitly specifying the dot
setopt globdots

# prevents you from accidentally overwriting an existing file
setopt noclobber

# something with prompt things.. actually i do not know what this does
setopt PROMPT_SUBST

# cd into folder if command doesn't exist but a folder does
setopt AUTO_CD

# put multiple directorys in cd dir stack
setopt AUTO_PUSHD
# but ignore duplicates
setopt PUSHD_IGNORE_DUPS

####################
#################### beginning of sourcing
####################

# source aliases
source ~/.dotfiles/zsh/zshrc.alias
if [[ "$(uname -s)" == "Darwin" ]]
then
    source ~/.dotfiles/zsh/zshrc.mac.alias
fi

# include keybindings from file
source ~/.dotfiles/zsh/zshrc.bindkey
#
# make automatic / with 2 dots (.)
# useful if: ...... ==> ../../../
rationalise-dot() {
    if [[ $LBUFFER = *.. ]]; then
        LBUFFER+=/..
    else
        LBUFFER+=.
    fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

# exports
export PASSWORD_STORE_X_SELECTION='XA_PRIMARY'
export PASSWORD_STORE_CLIP_TIME='20'
export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'
export EDITOR="vim"
export GIT_EDITOR="vim +startinsert"
export PAGER="less"
export PATH="$HOME/local/bin:$HOME/local/bin2:$PATH"
uname | grep -q Darwin && export PATH="/usr/local/opt/gpg-agent/bin:$PATH"

# source local config (testing or so)
if [ -f ~/.dotfiles/zsh/zshrc.local ]
then
    source ~/.dotfiles/zsh/zshrc.local
fi
# source autojump if installed
if [ -f /usr/share/autojump/autojump.sh ]
then
    source /usr/share/autojump/autojump.sh
elif [ -s ~/.autojump/etc/profile.d/autojump.sh ]
then
    source ~/.autojump/etc/profile.d/autojump.sh
elif [ -f /usr/local/etc/profile.d/autojump.sh ]
then
    source /usr/local/etc/profile.d/autojump.sh
fi

####################
#################### end of sourcing
####################

# enable colours
autoload -U colors
colors

# if command not found
if [[ -x /usr/lib/command-not-found ]] ; then
    function command_not_found_handler() {
        /usr/lib/command-not-found --no-failure-msg -- $1
    }
fi

# set $USER if not exists
if [ -z "$USER" ]
then
    USER="$(whoami)"
    export USER="$(whoami)"
fi

# define env file for ssh-agent informations
AGENT_ENV_FILE="/tmp/agent.$USER.env"
PGREP_SSH_AGENT="$(pgrep -u $USER ssh-agent)"

# start ssh-agent if none is started
if [ -z "$PGREP_SSH_AGENT" ]
then
    # remove agent file
    rm $AGENT_ENV_FILE 2> /dev/null
    # write agent info to file
    eval $(ssh-agent | tee $AGENT_ENV_FILE)
    # regrep for ssh-agent process since it is running now
    PGREP_SSH_AGENT="$(pgrep -u $USER ssh-agent)"
elif [ "$PGREP_SSH_AGENT" ] && [ -f "$AGENT_ENV_FILE" ]
then
    # source existing agent
    . $AGENT_ENV_FILE 2> /dev/null
fi

# add ssh keys to ssh-agent if running
if [ "$PGREP_SSH_AGENT" ] && [ "$(ssh-add -l | grep -v "The agent has no identities." | grep -Eio "/+.*" | sort | uniq | wc -l)" -lt "$(ls -l ~/.ssh/ 2>/dev/null | grep -E "(.key|id_[dr]sa)$" | wc -l)" ]
then
    ssh-add -t 3600 ~/.ssh/*.key 2> /dev/null
    ssh-add -t 3600 ~/.ssh/id_rsa 2> /dev/null
    ssh-add -t 3600 ~/.ssh/id_dsa 2> /dev/null
fi

# list tmux sessions if tmux running
pgrep -u $USER tmux 2> /dev/null > /dev/null
if [[ "$?" -eq 0 ]]
then
    # reinitialize envs for tmux server
    tmux setenv SSH_AUTH_SOCK $SSH_AUTH_SOCK; tmux setenv SSH_AGENT_PID $SSH_AGENT_PID;
    # list tmux sessions
    echo ""
    echo "Running tmux sessions:"
    tmux ls 2> /dev/null || echo "no tmux session running"
    echo ""
fi

# warn about broken sw raid
grep -sq _ /proc/mdstat && {
  echo ++++++++++++++++++++
  echo BROKEN MD RAID, please check manually
  echo press enter to dismiss warning
  echo ++++++++++++++++++++
  read blah
}

# my nice prompt template

function precmd() {

    # prompt for right side of screen
    RPROMPT='[%*]'

    # TMUX <3 stuff
    test ! -z "$TMUX" && local parsetmux="$(tmux display-message -p 'session: #S, pane: #P' 2> /dev/null)"

    # display tmux stuff
    if [ "$parsetmux" ]
    then
        local c1="$(tput setaf 172)"
        local c2="$(tput setaf 227)"
        local tmuxline=" ${c1}tmux-(${c2}#$(echo "$parsetmux" | tr "," "\n" | grep pane | awk '{print $2}')${c1}@${c2}$(echo "$parsetmux" | tr "," "\n" | grep session | awk '{print $2}')${c1})%{$reset_color%}"
    else
        local tmuxline=""
    fi

    # GIT stuff
    local git_branch="$(git branch 2> /dev/null || echo NO)"

    # display git stuff at the right side if anything detected
    if [ "$git_branch" != "NO" ]
    then
        local parse_git_branch="$(echo "$git_branch" | grep --color=auto "*" | sed -e 's/* \(.*\)/\1/g')"
        local git=" %{$fg[green]%}git %{$fg[cyan]%}⎇  $parse_git_branch%{$reset_color%}"

        # get git status
        local gitstatus="$(git status --porcelain 2> /dev/null)"

        # colorize gitline
        local gitline="${git}"
        # calculate files modified
        local count="$(echo "$gitstatus" 2> /dev/null | egrep "^\s{0,}M" | wc -l | tr -d " ")"
        [[ "$count" -gt 0 ]] && gitline="${gitline} %{$fg[red]%}× ${count}"
        # calculate files newly added
        local count="$(echo "$gitstatus" 2> /dev/null | egrep "^\s{0,}A" | wc -l | tr -d " ")"
        [[ "$count" -gt 0 ]] && gitline="$gitline %{$fg[green]%}+ ${count}"
        # calculate files renamed
        local count="$(echo "$gitstatus" 2> /dev/null | egrep "^\s{0,}R" | wc -l | tr -d " ")"
        [[ "$count" -gt 0 ]] && gitline="$gitline %{$fg[yellow]%}~ ${count}"
        # calculate files deleted
        local count="$(echo "$gitstatus" 2> /dev/null | egrep "^\s{0,}D" | wc -l | tr -d " ")"
        [[ "$count" -gt 0 ]] && gitline="$gitline %{$fg[cyan]%}- ${count}"
        # calculate files untracked
        local count="$(echo "$gitstatus" 2> /dev/null | egrep "^\s{0,}\?\?" | wc -l | tr -d " ")"
        [[ "$count" -gt 0 ]] && gitline="$gitline %{$fg[white]%}⁙ ${count}"
        # some symbols/characters for git line:  # ⁇ ⁂ ● ⚛ ⁙ ᛭ ⚫ ⚪ ✓ ×    
        # reset colors
        local gitline="${gitline}%{$reset_color%}"
    else
        local gitline=""
    fi

    # SVN stuff
    local svn_info="$(which svn > /dev/null 2> /dev/null && svn info 2> /dev/null)"

    # display git stuff at the right side if anything detected
    if [ "x$svn_info" != 'x' ]
    then
        local svn_info_url="$(echo "$svn_info" | grep -E "^URL" | awk -F\/ '{print $3}')"
        local svn=" %{$fg[green]%}svn://%{$fg[cyan]%}$svn_info_url%{$reset_color%}"
    fi

    # needed for exit status smiley/char
    # local exit="%(?,%{$fg[green]%}✔%{$reset_color%},%{$fg[red]%}✘%{$reset_color%})"
    local exit="%(?..%{ $fg[red]%}✘%{$reset_color%})"

    # parse pwd structure and build something nice out of it
    local dire="${(%):-%~}"

    # check if user is root
    local root=""
    if [ "$(whoami)" == "root" ]
    then
        local root=" %{$fg[white]%}%{$bg[red]%}root%{$reset_color%}"
    fi

    # decide which prompt
    case "$(hostname -s)" in
        'woulfair' | 'woulfpad' )
            local firstline="%{$fg[green]%}%n%{$fg[white]%}@%{$fg[red]%}%M%{$fg[white]%}:%y" ;;
        * )
            local firstline="%{$fg[blue]%}%n%{$fg[white]%}@%{$fg[red]%}%M%{$fg[white]%}:%y" ;;
    esac

    # append git/svn/other things
    local firstline="${firstline}${exit}${tmuxline}%{$fg[white]%}${gitline}${svn}${root}"

    # define 2nd line globally for all hosts
    local secondline="%{$fg[yellow]%}${dire} %{$fg[white]%}%% %{$reset_color%}"

    # finish the prompt
    PS1="$firstline
$secondline"

}

# END FOR PROMT STYLING

# fix broken chmod 777 colors
LS_COLORS="no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=01;34:ow=01;34:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:"

# include the awesome and colorful zsh highlighting
source ~/.dotfiles/zsh/highlighting/zsh-syntax-highlighting.zsh

# tweak the highlighting
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
ZSH_HIGHLIGHT_STYLES[globbing]='fg=magenta'
ZSH_HIGHLIGHT_STYLES[cursor]='bg=grey' # bug with cursor color on gnome shell

# pattern highlight
ZSH_HIGHLIGHT_PATTERNS+=('sudo' 'fg=white,bold,bg=red')
ZSH_HIGHLIGHT_PATTERNS+=('rm -*' 'fg=white,bold,bg=red')

# source local config after everything else (testing or so, too)
if [ -f ~/.dotfiles/zsh/zshrc.local.after ]
then
    source ~/.dotfiles/zsh/zshrc.local.after
fi
